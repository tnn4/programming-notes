args, tuple
unpacking operator(*), args -> *args

kwargs, dictionary
unpacking operator(**), kwargs -> **kwargs

examples

```
# sum_integers_args.py
def my_sum(*args):
    result = 0
    # Iterating over the Python args tuple
    for x in args:
        result += x
    return result

print(my_sum(1, 2, 3))
```

```
# concatenate.py
def concatenate(**kwargs):
    result = ""
    # Iterating over the Python kwargs dictionary
    for arg in kwargs.values(): #kwargs -> keys, kwargs.values() -> values
        result += arg
    return result

print(concatenate(a="Real", b="Python", c="Is", d="Great", e="!"))
```

args, kwargs are variable name that can be changed to whatever you want, they are not keywords

Order matters

1    Standard arguments
2    *args arguments
3    **kwargs arguments


```
# correct_function_definition.py
def my_function(a, b, *args, **kwargs):
    pass

# wrong_function_definition.py
def my_function(a, b, **kwargs, *args):
    pass

```

* vs none
```
# print_list.py
my_list = [1, 2, 3]
print(my_list)

$ python print_list.py
[1, 2, 3] # one list

```

```
# print_unpacked_list.py
my_list = [1, 2, 3]
print(*my_list)

$ python print_unpacked_list.py
1 2 3 # separate values
```